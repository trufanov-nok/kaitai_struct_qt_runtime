name: Unit tests

on:
  push:
    branches:
      - master
  pull_request: {}

jobs:
  linux-Qt5:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - name: Install GoogleTest
        run: .build/install-gtest 14
      - name: Update package lists
        run: sudo apt-get update
      - name: Install packages
        run: sudo apt-get install -y iwyu valgrind qtbase5-dev
      - name: Build
        env:
          QT_VER: 'Qt5'
          # This tells the C++ compiler to produce debugging info that Valgrind needs to report line numbers.
          # See also https://valgrind.org/docs/manual/manual-core.html#manual-core.started
          CMAKE_BUILD_TYPE: Debug
          CPP_STANDARD: 17
        run: |
          .build/build -DQtPkgList="$QT_VER" \
          DCMAKE_BUILD_TYPE="$CMAKE_BUILD_TYPE" \
            -DCMAKE_CXX_STANDARD="$CPP_STANDARD" -DCMAKE_CXX_STANDARD_REQUIRED=ON -DCMAKE_CXX_EXTENSIONS=OFF
      - name: Run tests
        run: .build/run-unittest --valgrind

  linux-Qt6:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - name: Install GoogleTest
        run: .build/install-gtest 14
      - name: Update package lists
        run: sudo apt-get update
      - name: Install packages
        run: sudo apt-get install -y iwyu valgrind qt6-base-dev
      - name: Build
        env:
          QT_VER: 'Qt6'
          # This tells the C++ compiler to produce debugging info that Valgrind needs to report line numbers.
          # See also https://valgrind.org/docs/manual/manual-core.html#manual-core.started
          CMAKE_BUILD_TYPE: Debug
          CPP_STANDARD: 17
        run: |
          .build/build -DQtPkgList="$QT_VER" \
          DCMAKE_BUILD_TYPE="$CMAKE_BUILD_TYPE" \
            -DCMAKE_CXX_STANDARD="$CPP_STANDARD" -DCMAKE_CXX_STANDARD_REQUIRED=ON -DCMAKE_CXX_EXTENSIONS=OFF
      - name: Run tests
        run: .build/run-unittest --valgrind

  macos-15-Qt6:
    runs-on: macos-15
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - name: Install GoogleTest
        run: .build/install-gtest 17
      - name: Install Qt
        run: brew install qt@6
      - name: Build
        env:
          QT_VER: 'Qt6'
          # This tells the C++ compiler to produce debugging info that Valgrind needs to report line numbers.
          # See also https://valgrind.org/docs/manual/manual-core.html#manual-core.started
          CPP_STANDARD: 17
          CMAKE_BUILD_TYPE: Debug
        run: |
          .build/build -DQtPkgList="$QT_VER" \
          DCMAKE_BUILD_TYPE="$CMAKE_BUILD_TYPE" \
            -DCMAKE_CXX_STANDARD="$CPP_STANDARD" -DCMAKE_CXX_STANDARD_REQUIRED=ON -DCMAKE_CXX_EXTENSIONS=OFF
      - name: Run tests
        run: .build/run-unittest

  macos-13-Qt5:
    runs-on: macos-13
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - name: Install GoogleTest
        run: .build/install-gtest 17
      - name: Install Qt
        run: brew install qt@5 && brew link qt@5 --force
      - name: Build
        env:
          QT_VER: 'Qt5'
          # This tells the C++ compiler to produce debugging info that Valgrind needs to report line numbers.
          # See also https://valgrind.org/docs/manual/manual-core.html#manual-core.started
          CPP_STANDARD: 17
          CMAKE_BUILD_TYPE: Debug
        run: |
          export PATH="/usr/local/opt/qt@5/bin:$PATH"
          export LDFLAGS="-L/usr/local/opt/qt@5/lib"
          export CPPFLAGS="-I/usr/local/opt/qt@5/include"
          export PKG_CONFIG_PATH="/usr/local/opt/qt@5/lib/pkgconfig"
          .build/build -DQtPkgList="$QT_VER" \
          DCMAKE_BUILD_TYPE="$CMAKE_BUILD_TYPE" \
            -DCMAKE_CXX_STANDARD="$CPP_STANDARD" -DCMAKE_CXX_STANDARD_REQUIRED=ON -DCMAKE_CXX_EXTENSIONS=OFF
      - name: Run tests
        run: .build/run-unittest

  windows-Qt6:
    runs-on: windows-latest
    # NB: see https://github.com/actions/runner-images/blob/main/images/windows/Windows2022-Readme.md for what's available in this image
    steps:
      - name: Install Qt6
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.9.0'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_msvc2022_64'
          install-deps: 'true'
          archives: 'qtbase'
      - name: restore
        run: |
          C:\vcpkg\bootstrap-vcpkg.bat
          C:\vcpkg\vcpkg install gtest:x64-windows zlib:x64-windows
      - uses: actions/checkout@v4
      - name: build
        env:
          QT_VER: 'Qt6'
          CMAKE_BUILD_TYPE: Debug
          CMAKE_BUILD_PARALLEL_LEVEL: 8
          QT_ROOT_DIR: '${{ github.workspace }}\Qt\6.9.0\msvc2022_64\'
          CMAKE_PREFIX_PATH: '${{ github.workspace }}\Qt\6.9.0\msvc2022_64\'
          CMAKE_TOOLCHAIN_FILE: 'C:\vcpkg\scripts\buildsystems\vcpkg.cmake'
        run: |
          .build\build.ps1 -GTestPath C:\vcpkg\installed\x64-windows -DCMAKE_CXX_STANDARD=11 -DCMAKE_CXX_STANDARD_REQUIRED=ON -DCMAKE_CXX_EXTENSIONS=OFF -DQtPkgList="${{ env.QT_VER }}" -DCMAKE_BUILD_TYPE="${{ env.CMAKE_BUILD_TYPE }}"
        shell: powershell
      - name: unittest
        run: .build\run-unittest.ps1
        shell: powershell

  windows-Qt5:
    runs-on: windows-latest
    # NB: see https://github.com/actions/runner-images/blob/main/images/windows/Windows2022-Readme.md for what's available in this image
    steps:
      - name: Install Qt5
        uses: jurplel/install-qt-action@v4
        with:
          version: '5.15.2'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_msvc2019_64'
          install-deps: 'true'
          archives: 'qtbase'
      - name: restore
      # qt5-base[core]:x64-windows
        run: |
          C:\vcpkg\bootstrap-vcpkg.bat
          C:\vcpkg\vcpkg install gtest:x64-windows zlib:x64-windows
      - uses: actions/checkout@v4
      - name: build
        env:
          QT_VER: 'Qt5'
          CMAKE_BUILD_TYPE: Debug
          CMAKE_BUILD_PARALLEL_LEVEL: 8
          QT_ROOT_DIR: '${{ github.workspace }}\Qt\5.15.2\msvc2019_64'
          CMAKE_PREFIX_PATH: '${{ github.workspace }}\Qt\5.15.2\msvc2019_64\'
          CMAKE_TOOLCHAIN_FILE: 'C:\vcpkg\scripts\buildsystems\vcpkg.cmake'
        run: |
          .build\build.ps1 -GTestPath C:\vcpkg\installed\x64-windows -DCMAKE_CXX_STANDARD=11 -DCMAKE_CXX_STANDARD_REQUIRED=ON -DCMAKE_CXX_EXTENSIONS=OFF -DQtPkgList="${{ env.QT_VER }}" -DCMAKE_BUILD_TYPE="${{ env.CMAKE_BUILD_TYPE }}"
        shell: powershell
      - name: unittest
        run: .build\run-unittest.ps1
        shell: powershell

  freebsd_14_2-Qt5:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run in FreeBSD
        uses: vmactions/freebsd-vm@v1
        with:
          release: "14.2"
          usesh: true
          prepare: |
            pkg install -y git cmake qt5-core qt5-qmake qt5-buildtools

          run: |
            echo '#### System information'
            whoami
            env
            freebsd-version
            c++ --version || :
            gcc --version || :
            clang++ --version || :
            pkg info

            echo '#### Installing GoogleTest'
            .build/install-gtest 11

            echo '#### Building'
            .build/build -DCMAKE_CXX_STANDARD=11 -DCMAKE_CXX_STANDARD_REQUIRED=ON -DCMAKE_CXX_EXTENSIONS=OFF

            echo '#### Testing'
            .build/run-unittest

  netbsd_10_1-Qt5:
    runs-on: ubuntu-latest
    # Doesn't use clang, has gcc:
    # c++ (nb3 20231008) 10.5.0
    # Copyright (C) 2020 Free Software Foundation, Inc.
    steps:
      - uses: actions/checkout@v4
      - name: Run in NetBSD
        uses: vmactions/netbsd-vm@v1
        with:
          release: "10.1"
          usesh: true
          prepare: |
            /usr/sbin/pkg_add cmake googletest qt5-qtbase

          run: |
            echo '#### System information'
            whoami
            env
            c++ --version
            gcc --version

            echo '#### Building'
            .build/build -DCMAKE_CXX_STANDARD=11 -DCMAKE_CXX_STANDARD_REQUIRED=ON -DCMAKE_CXX_EXTENSIONS=OFF

            echo '#### Testing'
            .build/run-unittest
